# -*- coding: utf-8 -*-
"""Vithack final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n0CgMbrMcQkSJoNMgekrpaSrjj8D_UOW
"""

#main csv file

#team stats file

#player stats file

import io
import pandas as pd
import nltk
from nltk.corpus import stopwords 
from nltk.tokenize import word_tokenize 

import re
import datetime

stop_words = set(stopwords.words('english'))
df = pd.read_csv('./dataset.csv')
df_teams = pd.read_csv('./team.csv')
df_players=pd.read_csv('./playerstats.csv')

teams=df.team1.unique()

d={
  "sunrisers hyderabad":0,
   "mumbai indians":1,
   "kolkata knight riders":4,
   "chennai super kings":2,
   "kings xi punjab":3,
   "rajasthan royals":5,
   "royal challengers bangalore":6
}

def team_function(query):
  count=0
  query=query.lower()
  for i in teams:
    if i in query:
      count=count+1
  if count<1:
    if (query.strip() not in d.keys()):
      print ("Team Data Unavailable at this moment")
    else:
      acr=d[query.strip()]
      print("Total Wins: ",df_teams['total wins'][acr]," Win Percentage: ",df_teams['win percentage'][acr])

def player_function(query):
  count=0
  l=query.split(" ")
  s=""
  for i in range (len(l)-1):
    s=s+l[i][0]
  s=s+" "+l[len(l)-1]
  s=s.strip()
  if s in df_players['Name'].unique():
    index=df_players[df_players["Name"]==s].index[0]
    print ("IPL Man of the Match Rewards: ",df_players['Awards'][index])
  else:
    print ("Data Not Available")

l_s=[]
for i in range (df.shape[0]):
  s=''
  for j in df.columns:
    if (j!="id"):
      s=s+' '+str(df[j][i]).lower()
  s.strip()
  l_s.append(s)


teams=list(df_teams['team name'].unique())

from diff_match_patch import diff_match_patch

def compute_similarity_and_diff(text1, text2):
    dmp = diff_match_patch()
    dmp.Diff_Timeout = 0.0
    diff = dmp.diff_main(text1, text2, False)

    # similarity
    common_text = sum([len(txt) for op, txt in diff if op == 0])
    text_length = max(len(text1), len(text2))
    sim = common_text / text_length

    return sim, diff

def main_function(query):
  player_count=0
  team_count=0
  q_c=query
  word_tokens = word_tokenize(query)
  filtered_sentence = [w for w in word_tokens if not w in stop_words] 
  query=(" ".join(filtered_sentence)).strip()
  year=0
  resolve=""
  resolve_index=-1
  mat=re.findall('[2][0][0-9]{2}',query)
  mat2=re.findall('[2][0][0-9]{2}-[01][0-9]-[0-3][1-9]',query)
  if (len(mat2)!=0):
    year=mat2[0]
  elif (len(mat)!=0):
    year=mat[0]
  else:
    x=datetime.datetime.now()
    year=str(x.year-1)
  resolved=""
  if (year!=0):
    temp=[]
    for i in l_s:
      if (year in i):
        sim,diff=compute_similarity_and_diff(i,query)
        temp.append(sim)
      else:
        temp.append(0)
    resolve_index=temp.index(max(temp))
    resolve=l_s[resolve_index].strip()
  ans=""
  if ("won" in q_c or year==q_c):
    ans=ans+df['winner'][resolve_index]
    if (df['win_by_runs'][resolve_index]!=0):
      ans=ans+" won by "+str(df['win_by_runs'][resolve_index])+" runs"
    else:
      ans=ans+" won by "+str(df['win_by_wickets'][resolve_index])+" wickets"
    if (df["dl_applied"][resolve_index]==1):
      ans=ans+" (dl applied)"
  if ("man of the match" in q_c or "mom" in q_c):
    ans=ans+" "+df['player_of_match'][resolve_index]
  if ("where" in q_c or "venue" in q_c or "stadium" in q_c):
    ans=ans+" in "+df['venue'][resolve_index]
  print (ans)
  for i in teams:
    if i in query:
      team_count=team_count+1
  query2=query
  l=query2.split(" ")
  s=""
  for i in range (len(l)-1):
    s=s+l[i][0]
  s=s+" "+l[len(l)-1]
  s=s.strip()
  s_list=s.split(" ")
  if (s_list[0].islower() or s_list[1][0].islower()):
    s_list[0]=s_list[0].upper()
    s_list[1]=s_list[1][0].upper()+s_list[1][1:]
  s=" ".join(s_list)
  ans=""
  if s in df_players['Name'].unique():
    player_count=player_count+1
  if (player_count==1):
    player_function(s)
  else:
    print ("We're working on more")
      

inp=input()
main_function(inp)

